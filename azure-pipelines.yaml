name: Azure Pipelines

stages:
  - stage: "Deploy"
    jobs:
      - job: deploy
        displayName: "Deploy infrastructure"
        pool:
          vmimage: "ubuntu-18.04"
        steps:
          - task: DownloadSecureFile@1
            displayName: "Download terraform.tfvars file"
            name: tfvars
            inputs:
              secureFile: "terraform.tfvars"

          - task: Bash@3
            displayName: "Copy terraform.tfvars file"
            inputs:
              targetType: "inline"
              script: |
                sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars

          - task: InstallSSHKey@0
            displayName: "Install SSH key"
            inputs:
              knownHostsEntry: ""
              sshKeySecureFile: "id_rsa"

          - task: TerraformInstaller@0
            displayName: "Install Terraform"
            inputs:
              terraformVersion: "0.14.9"

          - task: TerraformTaskV1@0
            displayName: "Terraform init"
            inputs:
              provider: "azurerm"
              command: "init"
              backendServiceArm: "terraform-sa"
              backendAzureRmResourceGroupName: "tstate"
              backendAzureRmStorageAccountName: "tstate2176"
              backendAzureRmContainerName: "tstate"
              backendAzureRmKey: "terraform.tfstate"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"

          - task: TerraformTaskV1@0
            displayName: "Terraform apply"
            inputs:
              provider: "azurerm"
              command: "apply"
              commandOptions: "-auto-approve"
              environmentServiceNameAzureRM: "terraform-sa"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
# - stage: Build
#   jobs:
#   - job: Build
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     # Needed for Terraform VM deployment
#     # - task: InstallSSHKey@0
#     #   inputs:
#     #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
#     #     sshPublicKey: 'PUBLIC_KEY'
#     #     sshKeySecureFile: 'id_rsa'
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: 'path/to/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi
# - stage:
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-16.04'
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: ''
#               appName: ''
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
# - deployment: VMDeploy
#   displayName: NAME
#   environment:
#     name:  ENVIRONMENT NAME
#     resourceType: VirtualMachine
#     tags: TAG NAME
#   strategy:
#     runOnce:
#       deploy:
#         steps:
#         - task: Bash@3
#           inputs:
#             targetType: 'inline'
#             script: |
#               #! /bin/bash

#               sudo apt-get upgrade -y
#               sudo apt-get install python3-pip -y
#               sudo apt-get install unzip -y
#               sudo apt-get install -y chromium-browser
#               pip3 install selenium
#               export PATH=$PATH:some/path
