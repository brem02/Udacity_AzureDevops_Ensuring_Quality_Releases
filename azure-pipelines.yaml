name: Azure Pipelines

stages:
  - stage: "Provisioning"
    jobs:
      - job: provision_infrastructure
        displayName: "Provision infrastructure"
        pool:
          vmimage: "ubuntu-18.04"
        steps:
          - task: DownloadSecureFile@1
            displayName: "Download terraform.tfvars file"
            name: tfvars
            inputs:
              secureFile: "terraform.tfvars"

          - task: Bash@3
            displayName: "Copy terraform.tfvars file"
            inputs:
              targetType: "inline"
              script: |
                #! /bin/bash
                sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars

          - task: TerraformInstaller@0
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '0.14.11'

          - task: TerraformTaskV1@0
            displayName: "Terraform init"
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
              backendServiceArm: 'terraform-sa'
              backendAzureRmResourceGroupName: 'tstate'
              backendAzureRmStorageAccountName: 'tstate5275'
              backendAzureRmContainerName: 'tstate'
              backendAzureRmKey: 'terraform.tfstate'

          - task: TerraformTaskV1@0
            displayName: "Terraform validate"
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'

          - task: TerraformTaskV1@0
            displayName: "Terraform plan"
            inputs:
              provider: "azurerm"
              command: "plan"
              environmentServiceNameAzureRM: "terraform-sa"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"

          - task: TerraformTaskV1@0
            displayName: "Terraform apply"
            inputs:
              provider: "azurerm"
              command: "apply"
              commandOptions: "-auto-approve"
              environmentServiceNameAzureRM: "terraform-sa"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"

  - stage: "Build"
    jobs:
    - job: build_artifacts
      displayName: "Build artifacts"
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
        - task: ArchiveFiles@2
          displayName: "Archive FakeRestAPI"
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
            verbose: true

        - task: PublishPipelineArtifact@1
          displayName: "Publish FakeRestAPI"
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
            artifactName: 'fakerestapi'

        - task: ArchiveFiles@2
          displayName: "Archive Selenium"
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
            verbose: true

        - task: PublishPipelineArtifact@1
          displayName: "Publish Selenium"
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
            artifactName: 'selenium'

  - stage: "Deploy"
    jobs:
      - deployment: deploy_fakerestapi
        displayName: "Deploy FakeRestAPI"
        pool:
          vmImage: 'ubuntu-18.04'
        environment: 'Test'
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureWebApp@1
                displayName: "Deploy Azure WebApp"
                inputs:
                  azureSubscription: 'terraform-sa'
                  appType: 'webAppLinux'
                  appName: 'WebApplication-AppService'
                  package: '$(Pipeline.Workspace)/fakerestapi/fakerestapi-$(Build.BuildId).zip'
                  deploymentMethod: 'auto'
      
      - deployment: deployment_vm
        displayName: "Deploy VM"
        environment:
          name: 'Test'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
              - task: Bash@3
                displayName: "Configure Selenium"
                inputs:
                  targetType: 'inline'
                  script: |
                    #! /bin/bash
                    sudo apt-get install -y software-properties-common
                    sudo apt-add-repository -y universe
                    sudo add-apt-repository -y ppa:deadsnakes/ppa
                    sudo apt-get -y update
                    sudo apt-get install -y python3.8 python3-pip unzip chromium-browser chromium-chromedriver
                    sudo apt autoremove -y
                    /usr/bin/python3.8 --version
                    python3 --version
                    pip3 install --upgrade pip
                    pip3 install selenium

  - stage: "Test"
    jobs:
    - job: postman_integration
      displayName: "Postman integration tests"
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      
      - task: NodeTool@0
        displayName: "Install Node.js"
        inputs:
          versionSpec: '14.x'
          checkLatest: true
      
      - task: Bash@3
        displayName: "Install Newman"
        inputs:
          targetType: 'inline'
          script: |
            #! /bin/bash
            npm install -g newman
            mkdir -p output/newman/

      - task: Bash@3
        displayName: "Run regression tests"
        inputs:
          targetType: 'inline'
          script: |
            #! /bin/bash
            newman run automatedtesting/postman/StarterAPIs.json \
            --suppress-exit-code \
            --delay-request 5000 \
            --reporters cli,junit --reporter-junit-export output/newman/regression.xml

      - task: PublishTestResults@2
        displayName: "Publish regression test results"
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/output/newman/'
          mergeTestResults: true
          testRunTitle: 'Regression test results'

    - deployment: test_vm
      displayName: "Deploy and run Selenium tests"
      environment:
        name: 'Test'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Bash@3
              displayName: "Run Selenium tests"
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  cd $(Pipeline.Workspace)/selenium
                  ls -la
                  # find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete  # delete everything except 'selenium-$(Build.BuildId).zip'
                  unzip -o selenium-$(Build.BuildId).zip
                  pwd
                  ls -la
                  sudo mkdir -p /var/log/selenium
                  sudo chmod 777 /var/log/selenium
                  ls -la
                  sudo python3 -u test-suite.py 2>&1 | sudo tee -a '/var/log/selenium/selenium-test-$(Build.BuildId).log'
                  # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                  cd $(System.DefaultWorkingDirectory)
                  mkdir -p log/selenium
                  pwd
                  sudo cp '/var/log/selenium/selenium-test-$(Build.BuildId).log' 'log/selenium/selenium-test-$(Build.BuildId).log'
                  ls -la
            - task: PublishPipelineArtifact@1
              displayName: "Publish Selenium logs"
              inputs:
                targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test-$(Build.BuildId).log'
                artifactName: 'selenium-logs'

# - stage: Build
#   jobs:
#   - job: Build
#     pool:
#       name: Hosted Ubuntu 1604
#     steps:
#     # Needed for Terraform VM deployment
#     # - task: InstallSSHKey@0
#     #   inputs:
#     #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
#     #     sshPublicKey: 'PUBLIC_KEY'
#     #     sshKeySecureFile: 'id_rsa'
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: 'path/to/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
#     - publish: $(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi
# - stage:
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-16.04'
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: ''
#               appName: ''
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
# - deployment: VMDeploy
#   displayName: NAME
#   environment:
#     name:  ENVIRONMENT NAME
#     resourceType: VirtualMachine
#     tags: TAG NAME
#   strategy:
#     runOnce:
#       deploy:
#         steps:
#         - task: Bash@3
#           inputs:
#             targetType: 'inline'
#             script: |
#               #! /bin/bash

#               sudo apt-get upgrade -y
#               sudo apt-get install python3-pip -y
#               sudo apt-get install unzip -y
#               sudo apt-get install -y chromium-browser
#               pip3 install selenium
#               export PATH=$PATH:some/path

# stages:
#   - stage: Build
#     jobs:
#     - job: Build
#       pool:
#         name: Hosted Ubuntu 1604
#       steps:
#       - task: CmdLine@2
#         displayName: Install Newman
#         inputs:
#           script: 'sudo npm install -g newman'
#           workingDirectory: $(System.DefaultWorkingDirectory)
#       - task: CmdLine@2
#         displayName: Run Regression Tests
#         continueOnError: true
#         inputs:
#           script: 'newman run StarterAPIs.json'
#           workingDirectory: 'starter-code/automatedtesting/postman'